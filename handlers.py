from config import PLANS, user_plans, user_payment_methods, gateway_pagamento,welcome_image,PLANS_RENEW,PLANS_DOWNSELL,GROUP_ID,GROUP_LINK,TOKEN_BOT_GESTAO, NOTIFICATION_IDS
from mercado_pago_api import create_payment_preference, create_pix_payment, get_payment_status as get_mp_payment_status
from efi_api import create_efi_pix_payment, get_efi_payment_status
from pushinpay_api import create_pushinpay_pix_payment, check_pushinpay_payment_status
from payment_verification import enqueue_payment_verification
from group_utils import send_group_link,send_group_link_downsell,generate_group_link,generate_group_link_donwsell
import threading
from telebot import types
import logging
import time
from remove_users import update_user_plan
import threading
import json
from datetime import datetime, timedelta
from telebot import TeleBot
from time import sleep

bot_gestao = TeleBot(TOKEN_BOT_GESTAO)

# Arquivo JSON que armazena informa√ß√µes de usu√°rios
FILE_PATH = "users.json"

# Dicion√°rios para rastreamento de intera√ß√µes e mensagens enviadas
interaction_tracker = {}
downsells_sent = {}

def remove_buttons(bot_conversa, chat_id, message_id):
    """
    Remove os bot√µes de uma mensagem espec√≠fica.
    """
    try:
        bot_conversa.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        logging.info(f"Bot√µes removidos para a mensagem {message_id} do usu√°rio {chat_id}.")
    except Exception as e:
        logging.error(f"Erro ao remover bot√µes para a mensagem {message_id} do usu√°rio {chat_id}: {e}")




def is_user_in_json(chat_id):
    """
    Verifica se o usu√°rio j√° est√° registrado no arquivo JSON.
    """
    try:
        with open(FILE_PATH, 'r') as file:
            users = json.load(file)
            return any(user['chat_id'] == chat_id for user in users)
    except (FileNotFoundError, json.JSONDecodeError):
        return False


def schedule_follow_up_message(bot_conversa, chat_id):
    """
    Agenda o envio de uma mensagem 25 minutos ap√≥s a intera√ß√£o inicial,
    verificando se o usu√°rio j√° est√° registrado no JSON.
    """
    interaction_time = datetime.now()
    interaction_tracker[chat_id] = interaction_time

    def send_follow_up():
        time.sleep(25 * 60)  # Aguarda 25 minutos

        # Verifica se o tempo de intera√ß√£o ainda corresponde ao registrado
        if interaction_tracker.get(chat_id) == interaction_time:
            # Verifica se o usu√°rio j√° est√° no JSON
            if is_user_in_json(chat_id):
                logging.info(f"Usu√°rio {chat_id} j√° est√° registrado no JSON. Mensagem de follow-up n√£o enviada.")
                interaction_tracker.pop(chat_id, None)  # Remove da lista de intera√ß√£o
                return

            # Verifica se o downsell j√° foi enviado nas √∫ltimas 24 horas
            last_downsell_time = downsells_sent.get(chat_id)
            if last_downsell_time and (datetime.now() - last_downsell_time).total_seconds() < 24 * 3600:
                logging.info(f"Mensagem de downsell n√£o enviada para {chat_id}. J√° enviada nas √∫ltimas 24 horas.")
                interaction_tracker.pop(chat_id, None)  # Remove da lista de intera√ß√£o
                return

            # Cria o bot√£o para reiniciar a conversa
            markup = types.InlineKeyboardMarkup()
            restart_button = types.InlineKeyboardButton(
                "üî• Aproveitar a oferta exclusiva!",
                callback_data="restart_conversation"
            )
            markup.add(restart_button)

            # Envia a mensagem de follow-up
            try:
                bot_conversa.send_message(
                    chat_id,
                    (
                        "üòâ **Ol√°! Percebemos que voc√™ demonstrou bastante interesse, mas ainda n√£o concluiu sua compra.**\n\n"
                        "üéâ **Para facilitar, estamos oferecendo um DESCONTO EXCLUSIVO!**\n\n"
                        "üëá **Clique no bot√£o abaixo e aproveite essa oportunidade agora mesmo. √â r√°pido e super f√°cil!**"
                    ),
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                logging.info(f"Mensagem de follow-up enviada para o usu√°rio {chat_id}.")
            except Exception as e:
                logging.error(f"Erro ao enviar mensagem de follow-up para {chat_id}: {e}")

            # Atualiza o registro do √∫ltimo envio do downsell
            downsells_sent[chat_id] = datetime.now()
            interaction_tracker.pop(chat_id, None)  # Remove da lista de intera√ß√£o

    # Inicia uma thread para enviar a mensagem no tempo certo
    threading.Thread(target=send_follow_up, daemon=True).start()



def send_welcome(bot_conversa, message):
    chat_id = message.chat.id
    
    # Agenda o envio da mensagem de follow-up
    schedule_follow_up_message(bot_conversa, chat_id)


    
    # Envia uma imagem como mensagem de boas-vindas
    with open("welcome_image.jpg", "rb") as photo:
        bot_conversa.send_photo(
            chat_id,
            photo,
            caption=(
    "üî• Bem-vindo ao MAIOR Grupo VIP do Telegram! üî•\n\n"
    "üîû EXCLUSIVO PARA OS MELHORES! üîû\n"
    "üì£ Aqui voc√™ encontra conte√∫dos que ningu√©m mais tem acesso!\n\n"
    "O QUE VOC√ä VAI ENCONTRAR AQUI:\n"
    "üîπ Onlyfans\n"
    "üîπ CloseFriends\n"
    "üîπ Privacy\n"
    "üîπ Incesto Real\n"
    "üîπ Grupos de Live\n"
    "üîπ XVideosRed\n"
    "üîπ DarkWEB\n"
    "üîπ Vazadas Exclusivas\n"
    "üîπ Tufos\n"
    "üîπ E muito mais...\n\n"
    "‚ú® Por que escolher nossos planos?\n"
    "‚úîÔ∏è Acesso TOTAL ao conte√∫do VIP\n"
    "‚úîÔ∏è Planos com benef√≠cios exclusivos\n"
    "‚úîÔ∏è Atualiza√ß√µes frequentes e conte√∫dos novos\n\n"
    "‚ö° N√ÉO PERCA TEMPO! Garanta j√° o seu acesso e aproveite vantagens exclusivas!\n\n"
    "üìû Suporte VIP 24h: @Suporte_OnlyFuns\n"
)


        )
    
     # Aguardar 2 segundos antes de continuar
    time.sleep(1.9)

    # Exibe as op√ß√µes de plano
    show_plan_options(bot_conversa, chat_id)



def show_plan_options(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    for key, (price, description, periodicity) in PLANS.items():
        button_text = f"{description} - R${price:.2f}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"plan_{key}"))

    message_text = (
    "üî• ESCOLHA SEU PLANO VIP AGORA! üî•\n\n"
    "üî∏ ü•â VIP BRONZE\n"
    "‚û°Ô∏è Acesso TOTAL por 7 dias\n\n"
    "üî∏ ü•à VIP PRATA\n"
    "‚û°Ô∏è Acesso TOTAL por 30 dias\n"
    "‚û°Ô∏è + Categorias Especiais\n\n"
    "üî∏ ü•á VIP OURO\n"
    "‚úîÔ∏è O campe√£o de vendas!\n"
    "‚û°Ô∏è Todas as categorias especiais\n"
    "‚û°Ô∏è + Novos conte√∫dos exclusivos\n\n"
    "üéâ Garanta j√° o seu acesso e desfrute do melhor conte√∫do VIP! üéâ"
)



    bot_conversa.send_message(chat_id, message_text, reply_markup=markup, parse_mode="Markdown")


def show_plan_option_discounts(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    for key, (price, description, periodicity) in PLANS_RENEW.items():
        button_text = f"{description} - R${price:.2f}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"discounts_{key}"))

    message_text = (
        "üî• Nossos Planos!!! üî•\n\n"
        "üî∏ ü•â VIP BRONZE\n"
        "‚û°Ô∏è Acesso TOTAL por 7 dias\n\n"
        "üî∏ ü•à VIP PRATA\n"
        "‚û°Ô∏è Acesso TOTAL por 30 dias + Categorias Especiais\n\n"
        "üî∏ ü•á VIP OURO\n"
        "‚û°Ô∏è O campe√£o de vendas\n"
        "‚û°Ô∏è Acesso 1 ano + todas as categorias especiais + novos conte√∫dos\n\n"
        "üî∏ üíé VIP PRO\n"
        "‚û°Ô∏è O mais desejado\n"
        "‚û°Ô∏è Tudo do VIP OURO + 10 GRUPOS EXCLUSIVOS\n\n"
        "üîí Pagamento √∫nico, acesso permanente.\n\n"
        "üìû Suporte: @Suporte\_OnlyFuns\n"
        "üõ°Ô∏è Pagamento 100% garantido via Mercado Pago (PIX/CART√ÉO)"
    )

    bot_conversa.send_message(chat_id, message_text, reply_markup=markup, parse_mode="Markdown")

    


def show_plan_option_downsell(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    for key, (price, description, periodicity) in PLANS_DOWNSELL.items():
        button_text = f"{description} - R${price:.2f}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"downsell_{key}"))

    message_text = (
        "üî• Nossos Planos!!! üî•\n\n"
        "üî∏ ü•â VIP BRONZE\n"
        "‚û°Ô∏è Acesso TOTAL por 7 dias\n\n"
        "üî∏ ü•à VIP PRATA\n"
        "‚û°Ô∏è Acesso TOTAL por 30 dias + Categorias Especiais\n\n"
        "üî∏ ü•á VIP OURO\n\n"
        "üîí Pagamento √∫nico, acesso permanente.\n\n"
        "üìû Suporte: @Suporte\_OnlyFuns\n"
        "üõ°Ô∏è Pagamento 100% garantido via Mercado Pago (PIX/CART√ÉO)"
    )

    bot_conversa.send_message(chat_id, message_text, reply_markup=markup)







def show_payment_method_options(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    #markup.add(types.InlineKeyboardButton("üí≥ Cart√£o de Cr√©dito", callback_data="payment_credit_card"))
    markup.add(types.InlineKeyboardButton("üí† Pix", callback_data="payment_pix_code"))
    #markup.add(types.InlineKeyboardButton("üì∑ Pix - QR Code", callback_data="payment_pix_qr"))
    bot_conversa.send_message(chat_id, "Escolha o m√©todo de pagamento:", reply_markup=markup)

def show_payment_method_options_discounts(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    #markup.add(types.InlineKeyboardButton("üí≥ Cart√£o de Cr√©dito", callback_data="payment_credit_card_discounts"))
    markup.add(types.InlineKeyboardButton("üí† Pix", callback_data="payment_pix_code_discounts"))
    #markup.add(types.InlineKeyboardButton("üì∑ Pix - QR Code", callback_data="payment_pix_qr"))
    bot_conversa.send_message(chat_id, "Escolha o m√©todo de pagamento:", reply_markup=markup)
    
def show_payment_method_options_downsell(bot_conversa, chat_id):
    markup = types.InlineKeyboardMarkup()
    #markup.add(types.InlineKeyboardButton("üí≥ Cart√£o de Cr√©dito", callback_data="payment_credit_card_downsell"))
    markup.add(types.InlineKeyboardButton("üí† Pix", callback_data="payment_pix_code_downsell"))
    #markup.add(types.InlineKeyboardButton("üì∑ Pix - QR Code", callback_data="payment_pix_qr"))
    bot_conversa.send_message(chat_id, "Escolha o m√©todo de pagamento:", reply_markup=markup)

def callback_query_handler(bot_conversa, call):
    
    chat_id = call.message.chat.id
    message_id = call.message.message_id  # Obt√©m o ID da mensagem com os bot_conversa√µes

       
    if call.data.startswith("renew_"):
        # Exibe as op√ß√µes de planos para renova√ß√£o
        show_plan_option_discounts(bot_conversa, chat_id)
        
        
    elif call.data == "restart_conversation":
        #bot_conversa.send_message(call.message.chat.id, "üëã Que bom ter voc√™ de volta! Vamos continuar sua compra?")
        show_plan_option_downsell(bot_conversa, chat_id)  # Reinicia a intera√ß√£o
    
    elif call.data.startswith("discounts_"):
        plan = call.data.split("_")[1]
        user_plans[chat_id] = plan
        #bot_conversa.send_message(chat_id, f"üîÑ Voc√™ escolheu renovar o plano {PLANS_RENEW[plan][1]} com o valor de R${PLANS_RENEW[plan][0]:.2f}.")
        #show_payment_method_options_discounts(bot_conversa, chat_id)
        send_pix_code_discounts(bot_conversa, chat_id, plan, send_qr=False)
        #send_pix_code_discounts
        
    elif call.data.startswith("downsell_"):
        plan = call.data.split("_")[1]
        user_plans[chat_id] = plan
        #bot_conversa.send_message(chat_id, f"üîÑ Voc√™ escolheu renovar o plano {PLANS_RENEW[plan][1]} com o valor de R${PLANS_RENEW[plan][0]:.2f}.")
        #show_payment_method_options_downsell(bot_conversa, chat_id)
        send_pix_code_downsell(bot_conversa, chat_id, plan, send_qr=False)

        
        
    #if call.data.startswith("restart_conversation"):
     #   plan = call.data.split("_")[1]
      #  user_plans[chat_id] = plan
       # amount, description, duration = PLANS_DOWNSELL[plan]  # Obt√©m os detalhes do plano
        #bot_conversa.send_message(
            #chat_id,
            #(
                #f"üéâ Parab√©ns pela escolha! üéâ\n\n"
                #f"üíé Plano Selecionado:\n"
                #f"üî• {description.strip()} üî•\n\n"
                #f"‚è≥ Dura√ß√£o: {duration} dias de acesso total\n"
                #f"üí∞ Valor: R${amount:.2f}\n\n"
                #f"üöÄ Voc√™ est√° a um passo de liberar o acesso VIP mais exclusivo do Telegram!\n\n"
                #f"üéØ Escolha agora a sua forma de pagamento para continuar!"
            #),
            #parse_mode="Markdown"
       #)
        #show_payment_method_options_downsell(bot_conversa, chat_id)

    
    if call.data.startswith("plan_"):
        plan = call.data.split("_")[1]
        user_plans[chat_id] = plan
        amount, description, duration = PLANS[plan]  # Obt√©m os detalhes do plano
        #bot_conversa.send_message(
            #chat_id,x'
            #(
                #f"üéâ Parab√©ns pela escolha! üéâ\n\n"
                #f"üíé Plano Selecionado:\n"
                #f"üî• {description.strip()} üî•\n\n"
                #f"‚è≥ Dura√ß√£o: {duration} dias de acesso total\n"
                #f"üí∞ Valor: R${amount:.2f}\n\n"
                #f"üöÄ Voc√™ est√° a um passo de liberar o acesso VIP mais exclusivo do Telegram!\n\n"
                #f"üéØ Escolha agora a sua forma de pagamento para continuar!"
            #),
            #parse_mode="Markdown"
       #)
        #show_payment_method_options(bot_conversa, chat_id)
        send_pix_code(bot_conversa, chat_id, plan, send_qr=False)

        



    elif call.data == "payment_credit_card":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'credit_card'
            send_payment_link(bot_conversa, chat_id, plan)


    elif call.data == "payment_pix_code":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'pix'
            send_pix_code(bot_conversa, chat_id, plan, send_qr=False)

    elif call.data == "payment_credit_card_discounts":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'credit_card'
            send_payment_link_discounts(bot_conversa, chat_id, plan)


    elif call.data == "payment_pix_code_discounts":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'pix'
            send_pix_code_discounts(bot_conversa, chat_id, plan, send_qr=False)

    elif call.data == "payment_credit_card_downsell":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'credit_card'
            send_payment_link_downsell(bot_conversa, chat_id, plan)


    elif call.data == "payment_pix_code_downsell":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'pix'
            send_pix_code_downsell(bot_conversa, chat_id, plan, send_qr=False)


    elif call.data == "payment_pix_qr":
        plan = user_plans.get(chat_id)
        if plan:
            user_payment_methods[chat_id] = 'pix'
            send_pix_code(bot_conversa, chat_id, plan, send_qr=True)


    elif call.data.startswith("verify_payment:"):
        payment_id = call.data.split(":")[1]
        if gateway_pagamento == "mercado_pago":
            status = get_mp_payment_status(payment_id)
            status_check = status.get('status') == 'approved'
        elif gateway_pagamento == "efi":
            status = get_efi_payment_status(payment_id)
            status_check = status == 'approved'
        elif gateway_pagamento == "pushin_pay":
            status_info = check_pushinpay_payment_status(payment_id)
            status_check = status_info.get('status') == 'paid'

        else:
            status_check = False

        if status_check:
            # Remove os bot√µes da mensagem
            try:
                bot_conversa.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
            except Exception as e:
                logging.error(f"Erro ao remover bot√µes: {e}")

            # Gera o link do grupo
            link = generate_group_link(bot_gestao, chat_id)
            if link:
                bot_conversa.send_message(
                    chat_id,
                    f"‚úÖ Pagamento aprovado! Clique no link abaixo para entrar no grupo VIP:\n{link}"
                )

            else:
                bot_conversa.send_message(
                    chat_id,
                    "‚ö†Ô∏è Ocorreu um erro ao gerar o link de acesso. Por favor, tente novamente mais tarde."
                )
        else:
            bot_conversa.send_message(
                chat_id,
                "‚ö†Ô∏è O pagamento ainda n√£o foi identificado. Tente novamente mais tarde.",
                parse_mode="Markdown"
            )

        


    if call.data.startswith("verify_payment_discounts:"):
        payment_id = call.data.split(":")[1]
        if gateway_pagamento == "mercado_pago":
            status = get_mp_payment_status(payment_id)
            status_check = status.get('status') == 'approved'
        elif gateway_pagamento == "efi":
            status = get_efi_payment_status(payment_id)
            status_check = status == 'approved'
        elif gateway_pagamento == "pushin_pay":
            status_info = check_pushinpay_payment_status(payment_id)
            status_check = status_info.get('status') == 'paid'

        if status_check:
        # Remove os bot_conversa√µes ap√≥s a confirma√ß√£o do pagamento
            bot_conversa.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)

        # Atualiza o registro do usu√°rio
        plan = user_plans.get(chat_id)
        if plan:
            amount, description, periodicity = PLANS_RENEW[plan]
            update_user_plan(chat_id, plan, periodicity)

        # Envia a confirma√ß√£o de renova√ß√£o para o usu√°rio
        bot_conversa.send_message(chat_id, "‚úÖ Seu plano foi renovado com sucesso! Aproveite mais dias de acesso VIP.", parse_mode="Markdown")

        # Envia a notifica√ß√£o para o administrador
        plan_info = PLANS.get(plan)
        if plan_info:
            plan_value = plan_info[0]  # O valor do plano
            plan_duration = plan_info[2]  # A dura√ß√£o do plano em dias
            expiry_date = datetime.now() + timedelta(days=plan_duration)

            # Coleta a data de aquisi√ß√£o (data atual)
            acquisition_date = datetime.now().strftime("%Y-%m-%d")

            notification_message = (
                f"üéâ *Renova√ß√£o de Assinatura Realizada!* üéâ\n\n"
                f"üìä **Detalhes da Renova√ß√£o:**\n"
                f"üë§ **ID do Usu√°rio:** {chat_id}\n"
                f"üí≥ **Plano Selecionado:** {plan}\n"
                f"üíµ **Valor do Plano:** R${plan_value:.2f}\n"
                f"üìÖ **Data de Aquisi√ß√£o:** {acquisition_date}\n"
                f"‚è≥ **Data de Expira√ß√£o:** {expiry_date.strftime('%Y-%m-%d')}"
            )

            # Envia a notifica√ß√£o para o administrador
            for admin_id in NOTIFICATION_IDS:
                try:
                    bot_gestao.send_message(
                        admin_id,
                        notification_message,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"Erro ao notificar o administrador {admin_id}: {e}")
        
        
    if call.data.startswith("verify_payment_downsell:"):
        payment_id = call.data.split(":")[1]
        if gateway_pagamento == "mercado_pago":
            status = get_mp_payment_status(payment_id)
            status_check = status.get('status') == 'approved'
        elif gateway_pagamento == "efi":
            status = get_efi_payment_status(payment_id)
            status_check = status == 'approved'
        elif gateway_pagamento == "pushin_pay":
            status_info = check_pushinpay_payment_status(payment_id)
            status_check = status_info.get('status') == 'paid'

        else:
            status_check = False

        if status_check:
            # Remove os bot√µes da mensagem ap√≥s a confirma√ß√£o do pagamento
            remove_buttons(bot_conversa, chat_id, message_id)

            # Gera o link do grupo
            link = generate_group_link_donwsell(bot_gestao, chat_id)
            if link:
                bot_conversa.send_message(
                    chat_id,
                    f"‚úÖ Pagamento aprovado! Clique no link abaixo para entrar no grupo VIP:\n{link}"
                )
            else:
                bot_conversa.send_message(
                    chat_id,
                    "‚ö†Ô∏è Ocorreu um erro ao gerar o link de acesso. Por favor, tente novamente mais tarde."
                )
        else:
            bot_conversa.send_message(
                chat_id,
                "‚ö†Ô∏è O pagamento ainda n√£o foi identificado.",
                parse_mode="Markdown"
            )
      




def send_payment_link(bot_conversa, chat_id, plan):
    amount, description,periodicity = PLANS[plan]
    preference = create_payment_preference(amount, description)
    if not preference:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
        return

    payment_url = preference['init_point']
    payment_id = preference['id']

    bot_conversa.send_message(chat_id, "üí≥ Clique no link abaixo para realizar o pagamento com cart√£o de cr√©dito:")
    bot_conversa.send_message(chat_id, payment_url)

    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment:{payment_id}")
    markup.add(pay_btn)

    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s efetuar o pagamento, clique no bot√£o abaixo:", reply_markup=markup)
    enqueue_payment_verification(bot_conversa, chat_id, payment_id, 'credit_card')

def send_payment_link_discounts(bot_conversa, chat_id, plan):
    amount, description,periodicity = PLANS_RENEW[plan]
    preference = create_payment_preference(amount, description)
    if not preference:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
        return

    payment_url = preference['init_point']
    payment_id = preference['id']

    bot_conversa.send_message(chat_id, "üí≥ Clique no link abaixo para realizar o pagamento com cart√£o de cr√©dito:")
    bot_conversa.send_message(chat_id, payment_url)

    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment_discounts:{payment_id}")
    markup.add(pay_btn)

    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s efetuar o pagamento, clique no bot√£o abaixo:", reply_markup=markup)
    
    
def send_payment_link_downsell(bot_conversa, chat_id, plan):
    amount, description,periodicity = PLANS_DOWNSELL[plan]
    preference = create_payment_preference(amount, description)
    if not preference:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
        return

    payment_url = preference['init_point']
    payment_id = preference['id']

    bot_conversa.send_message(chat_id, "üí≥ Clique no link abaixo para realizar o pagamento com cart√£o de cr√©dito:")
    bot_conversa.send_message(chat_id, payment_url)

    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment_downsell:{payment_id}")
    markup.add(pay_btn)

    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s efetuar o pagamento, clique no bot√£o abaixo:", reply_markup=markup)

def escape_markdown(text):
    escape_chars = r'_\[\]()~>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def send_pix_code(bot_conversa, chat_id, plan, send_qr=True):
    amount, description,periodicity = PLANS[plan]

    if gateway_pagamento == "mercado_pago":
        payment = create_pix_payment(amount, description)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['point_of_interaction']['transaction_data']['qr_code']
        qr_code_url = payment['point_of_interaction']['transaction_data']['qr_code_base64']
        payment_id = payment['id']

    elif gateway_pagamento == "efi":
        payment = create_efi_pix_payment(amount, description,periodicity)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['pixCopiaECola']
        qr_code_url = f"https://quickchart.io/qr?text={pix_code}"
        payment_id = payment['txid']

    elif gateway_pagamento == "pushin_pay":
        payment = create_pushinpay_pix_payment(amount)
        if not payment or "error" in payment:
            bot_conversa.send_message(chat_id, f"‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento: {payment.get('error', 'Erro desconhecido')}")
            return
        pix_code = payment['qr_code_text']
        qr_code_url = payment['qr_code']
        payment_id = payment['id']
    
    else:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Gateway de pagamento inv√°lido.")
        return
    


    # Depois envia o c√≥digo Pix com o bot√£o para verificar pagamento
    pix_code_box = f"<pre>{pix_code}</pre>"
    bot_conversa.send_message(
        chat_id,
        (
            "üöÄ Finalize seu pagamento agora!\n\n"
            f"üíé Plano Selecionado: {description.strip()}\n"
            f"üíµ Valor: R${amount:.2f}\n\n"
            "üí† Aqui est√° seu c√≥digo Pix. Copie e pague no seu banco:\n"
            f"{pix_code_box}"
        ),
        parse_mode="HTML")

    qr_code_url = f"https://quickchart.io/qr?text={pix_code}"  # URL do QR Code
    # Primeiro envia o QR Code
    bot_conversa.send_message(chat_id, "üîó Aqui est√° seu QR Code. Escaneie e pague no seu banco:")
    bot_conversa.send_photo(chat_id, qr_code_url)

    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment:{payment_id}")
    markup.add(pay_btn)
    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s realizar o pagamento, seu link ser√° automaticamente disponibilizado aqui. Se pagou e o link ainda n√£o apareceu, clique no bot√£o Verificar Pagamento:", reply_markup=markup)    
 

    # Adiciona o bot√£o de verificar pagamento ao final

    


        
    

        #bot_conversa.send_message(chat_id, "üîó Aqui est√° seu c√≥digo Pix. Copie e pague no seu banco:", parse_mode="HTML")
        #bot_conversa.send_message(chat_id, pix_code_box, parse_mode="HTML", reply_markup=markup)


    
def send_pix_code_discounts(bot_conversa, chat_id, plan, send_qr=True):
    amount, description,periodicity = PLANS_RENEW[plan]

    if gateway_pagamento == "mercado_pago":
        payment = create_pix_payment(amount, description)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['point_of_interaction']['transaction_data']['qr_code']
        qr_code_url = payment['point_of_interaction']['transaction_data']['qr_code_base64']
        payment_id = payment['id']

    elif gateway_pagamento == "efi":
        payment = create_efi_pix_payment(amount, description,periodicity)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['pixCopiaECola']
        qr_code_url = f"https://quickchart.io/qr?text={pix_code}"
        payment_id = payment['txid']

    elif gateway_pagamento == "pushin_pay":
        payment = create_pushinpay_pix_payment(amount)
        if not payment or "error" in payment:
            bot_conversa.send_message(chat_id, f"‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento: {payment.get('error', 'Erro desconhecido')}")
            return
        pix_code = payment['qr_code_text']
        qr_code_url = payment['qr_code']
        payment_id = payment['id']
    
    else:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Gateway de pagamento inv√°lido.")
        return
    


    # Depois envia o c√≥digo Pix com o bot√£o para verificar pagamento
    pix_code_box = f"<pre>{pix_code}</pre>"
    bot_conversa.send_message(
        chat_id,
        (
            "üöÄ Finalize seu pagamento agora!\n\n"
            f"üíé Plano Selecionado: {description.strip()}\n"
            f"üíµ Valor: R${amount:.2f}\n\n"
            "üí† Aqui est√° seu c√≥digo Pix. Copie e pague no seu banco:\n"
            f"{pix_code_box}"
        ),
        parse_mode="HTML"
    )
    
    qr_code_url = f"https://quickchart.io/qr?text={pix_code}"  # URL do QR Code

     # Primeiro envia o QR Code
    bot_conversa.send_message(chat_id, "üîó Aqui est√° seu QR Code. Escaneie e pague no seu banco:")
    bot_conversa.send_photo(chat_id, qr_code_url)

    # Adiciona o bot√£o de verificar pagamento ao final
    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment_discounts:{payment_id}")
    markup.add(pay_btn)
    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s realizar o pagamento, seu link ser√° automaticamente disponibilizado aqui. Se pagou e o link ainda n√£o apareceu, clique no bot√£o Verificar Pagamento:", reply_markup=markup)
 

def send_pix_code_downsell(bot_conversa, chat_id, plan, send_qr=True):
    amount, description,periodicity = PLANS_DOWNSELL[plan]

    if gateway_pagamento == "mercado_pago":
        payment = create_pix_payment(amount, description)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['point_of_interaction']['transaction_data']['qr_code']
        qr_code_url = payment['point_of_interaction']['transaction_data']['qr_code_base64']
        payment_id = payment['id']

    elif gateway_pagamento == "efi":
        payment = create_efi_pix_payment(amount, description,periodicity)
        if not payment:
            bot_conversa.send_message(chat_id, "‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento. Tente novamente mais tarde.")
            return
        pix_code = payment['pixCopiaECola']
        qr_code_url = f"https://quickchart.io/qr?text={pix_code}"
        payment_id = payment['txid']

    elif gateway_pagamento == "pushin_pay":
        payment = create_pushinpay_pix_payment(amount)
        if not payment or "error" in payment:
            bot_conversa.send_message(chat_id, f"‚ö†Ô∏è Ocorreu um erro ao gerar o pagamento: {payment.get('error', 'Erro desconhecido')}")
            return
        pix_code = payment['qr_code_text']
        qr_code_url = payment['qr_code']
        payment_id = payment['id']
    
    else:
        bot_conversa.send_message(chat_id, "‚ö†Ô∏è Gateway de pagamento inv√°lido.")
        return
    


    # Depois envia o c√≥digo Pix com o bot√£o para verificar pagamento
    pix_code_box = f"<pre>{pix_code}</pre>"
    bot_conversa.send_message(
        chat_id,
        (
            "üöÄ Finalize seu pagamento agora!\n\n"
            f"üíé Plano Selecionado: {description.strip()}\n"
            f"üíµ Valor: R${amount:.2f}\n\n"
            "üí† Aqui est√° seu c√≥digo Pix. Copie e pague no seu banco:\n"
            f"{pix_code_box}"
        ),
        parse_mode="HTML"
    )
    
    qr_code_url = f"https://quickchart.io/qr?text={pix_code}"  # URL do QR Code

     # Primeiro envia o QR Code
    bot_conversa.send_message(chat_id, "üîó Aqui est√° seu QR Code. Escaneie e pague no seu banco:")
    bot_conversa.send_photo(chat_id, qr_code_url)

    # Adiciona o bot√£o de verificar pagamento ao final
    markup = types.InlineKeyboardMarkup()
    pay_btn = types.InlineKeyboardButton("Verificar Pagamento", callback_data=f"verify_payment_downsell:{payment_id}")
    markup.add(pay_btn)
    bot_conversa.send_message(chat_id, "‚úÖ Ap√≥s realizar o pagamento, seu link ser√° automaticamente disponibilizado aqui. Se pagou e o link ainda n√£o apareceu, clique no bot√£o Verificar Pagamento:", reply_markup=markup)
 
        #bot_conversa.send_message(chat_id, "üîó Aqui est√° seu c√≥digo Pix. Copie e pague no seu banco:", parse_mode="HTML")
        #bot_conversa.send_message(chat_id, pix_code_box, parse_mode="HTML", reply_markup=markup)

def clear_user_data(chat_id):
    user_plans.pop(chat_id, None)
    user_payment_methods.pop(chat_id, None)
    logging.debug(f"Dados tempor√°rios removidos para o chat_id: {chat_id}")
